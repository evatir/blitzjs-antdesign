export declare enum FieldType {
    Boolean = "Boolean",
    DateTime = "DateTime",
    Float = "Float",
    Int = "Int",
    Json = "Json",
    String = "String"
}
export declare enum Relation {
    belongsTo = 0
}
interface FieldArgs {
    default?: any;
    isId?: boolean;
    isList?: boolean;
    isRequired?: boolean;
    isUnique?: boolean;
    isUpdatedAt?: boolean;
    type: FieldType | string;
    relationFromFields?: string[];
    relationToFields?: string[];
}
export declare class Field {
    default?: any;
    name: string;
    isId: boolean;
    isList: boolean;
    isRequired: boolean;
    isUnique: boolean;
    isUpdatedAt: boolean;
    type: FieldType | string;
    relationFromFields?: string[];
    relationToFields?: string[];
    static parse(input: string): Field[];
    constructor(name: string, options: FieldArgs);
    private getDefault;
    private getId;
    private getIsUnique;
    private getIsUpdatedAt;
    private getRelation;
    private getTypeModifiers;
    private getAttributes;
    toString(): string;
}
export {};
