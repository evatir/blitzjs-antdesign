import { existsSync, readJSONSync } from 'fs-extra';
import path, { join } from 'path';
import pkgDir from 'pkg-dir';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var debug = /*#__PURE__*/require("debug")("blitz:config");

function getProjectRoot() {
  return path.dirname(path.resolve(process.cwd(), "blitz.config.js")) || pkgDir.sync() || process.cwd();
}

/**
 * @param {boolean | undefined} reload - reimport config files to reset global cache
 */
var getConfig = function getConfig(reload) {
  var _pkgJson;

  if (global.blitzConfig && Object.keys(global.blitzConfig).length > 0 && !reload) {
    return global.blitzConfig;
  }

  var _require = require("next/constants"),
      PHASE_DEVELOPMENT_SERVER = _require.PHASE_DEVELOPMENT_SERVER,
      PHASE_PRODUCTION_SERVER = _require.PHASE_PRODUCTION_SERVER;

  var pkgJson;
  var pkgJsonPath = join(getProjectRoot(), "package.json");

  if (existsSync(pkgJsonPath)) {
    pkgJson = readJSONSync(join(getProjectRoot(), "package.json"));
  }

  var blitzConfig = {
    _meta: {
      packageName: (_pkgJson = pkgJson) == null ? void 0 : _pkgJson.name
    }
  };
  var projectRoot = getProjectRoot();
  var nextConfigPath = path.join(projectRoot, "next.config.js");
  var blitzConfigPath = path.join(projectRoot, "blitz.config.js");
  debug("nextConfigPath: " + nextConfigPath);
  debug("blitzConfigPath: " + blitzConfigPath);
  var loadedNextConfig = {};
  var loadedBlitzConfig = {};

  try {
    // --------------------------------
    // Load next.config.js if it exists
    // --------------------------------
    if (existsSync(nextConfigPath)) {
      // eslint-disable-next-line no-eval -- block webpack from following this module path
      loadedNextConfig = eval("require")(nextConfigPath);

      if (typeof loadedNextConfig === "function") {
        var phase = process.env.NODE_ENV === "production" ? PHASE_PRODUCTION_SERVER : PHASE_DEVELOPMENT_SERVER;
        loadedNextConfig = loadedNextConfig(phase, {});
      }
    } // --------------------------------
    // Load blitz.config.js
    // --------------------------------
    // eslint-disable-next-line no-eval -- block webpack from following this module path


    loadedBlitzConfig = eval("require")(blitzConfigPath);

    if (typeof loadedBlitzConfig === "function") {
      var _phase = process.env.NODE_ENV === "production" ? PHASE_PRODUCTION_SERVER : PHASE_DEVELOPMENT_SERVER;

      loadedBlitzConfig = loadedBlitzConfig(_phase, {});
    } // -------------
    // Merge configs
    // -------------


    blitzConfig = _extends({}, blitzConfig, loadedNextConfig, loadedBlitzConfig);
  } catch (error) {
    debug("Failed to load config in getConfig()", error);
  } // Idk why, but during startup first result of loading blitz config is empty
  // Therefore don't cache it so that next time will load the full config properly


  if (Object.keys(loadedBlitzConfig).length) {
    global.blitzConfig = blitzConfig;
  }

  return blitzConfig;
};

export { getConfig, getProjectRoot };
